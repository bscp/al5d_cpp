{
	"for": {
		"prefix": "sfor",
		"body": [
			"for (${size_t}1 ${i} = ${1:0}; ${i} < ${2:length}; ${i}++)",
			"{",
			"	$3",
			"}"
		],
		"description": "Code snippet for 'for' loop"
	},
	"while": {
		"prefix": "swhile",
		"body": [
			"while ($1)",
			"{",
			"	$2",
			"}"
		],
		"description": ""
	},
	"foreach": {
		"prefix": "sforeach",
		"body": [
			"for(auto ${var} : ${collection_to_loop})",
			"{",
			"	$1",
			"}"
		],
		"description": "Code snippet for range-based for loop (c++11) statement"
	},
	"if": {
		"prefix": "sif",
		"body": [
			"if ($1)",
			"{",
			"	$2",
			"}"
		],
		"description": "Code snippet for if statement"
	},
	"else": {
		"prefix": "selse",
		"body": [
			"else",
			"{",
			"	$1",
			"}"
		],
		"description": "Code snippet for else statement"
	},
	"else if": {
		"prefix": "selse if",
		"body": [
			"else if ($1)",
			"{",
			"	$2",
			"}"
		],
		"description": "Code snippet for else-if statement"
	},
	"Compact class": {
		"prefix": "sclassh",
		"body": [
			"class ${MyClass}",
			"{",
			"public:",
			"	${MyClass}();",
			"};"
		],
		"description": "Code snippet for class"
	},
	"Big class": {
		"prefix": "sbigclassh",
		"body": [
			"class ${MyClass}",
			"{",
			"public:",
			"	${MyClass}();",
			"	${MyClass}(${MyClass} &&) = default;",
			"	${MyClass}(const ${MyClass} &) = default;",
			"	${MyClass} &operator=(${MyClass} &&) = default;",
			"	${MyClass} &operator=(const ${MyClass} &) = default;",
			"	~${MyClass}();",
			"",
			"private:",
			"	$1",
			"};"
		],
		"description": "Code snippet for class"
	},
	"namespace": {
		"prefix": "snamespace",
		"body": [
			"namespace ${MyNamespace}",
			"{",
			"	$1",
			"}"
		]
	},
	"#ifndef": {
		"prefix": "sifndef",
		"body": [
			"#ifndef ${1:1}",
			"$2",
			"#endif // !$1"
		],
		"description": "Code snippet for #ifndef"
	},
	"cout": {
		"prefix": "scout",
		"body": [
			"std::cout << \"${1:/* message */}\" << std::endl;"
		],
		"description": "Code snippet for printing to std::cout, provided the header is set"
	},
	"#inc": {
		"prefix": "sinc",
		"body": [
			"#include <$1>"
		],
		"description": "Code snippet for #include \" \""
	},
	"#inc<": {
		"prefix": "sinc\"",
		"body": [
			"#include \"$1\""
		],
		"description": "Code snippet for #include \" \""
	},
	"#def": {
		"prefix": "s#def",
		"body": [
			"#define \"$1\" \"$2\" "
			],
		"description": "Code snippet for #define \" \""
	},
	"main": {
		"prefix": "smain",
		"body": [
			"int main(int argc, const char** argv)",
			"{",
			"    return 0;",
			"}"
		],
		"description": "Code snippet main"
	},
	"method": {
		"prefix": "smethod",
		"body": [
			"void ${MyClass}::${MyClass}()",
			"{",
			"}"
		],
		"description": "Code snippet for method"
	},
	"cpp class file": {
		"prefix": "scppclassfile",
		"body": [
			"// HEADER INCLUDE",
			"#include <${1}/${MyClass}.hpp>",
			"",
			"",
			"namespace ${1}",
			"{",
			"    ${MyClass}::${MyClass}()",
			"    {",
			"    }${0}",
			"}",
			""
		],
		"description": "Code snippet for a cpp file"
	},
	"hpp class file": {
		"prefix": "shppclassfile",
		"body": [
			"#ifndef ${1/(.*)/${1:/upcase}/}_${2/(.*)/${2:/upcase}/}_HPP"
			"#define ${1/(.*)/${1:/upcase}/}_${2/(.*)/${2:/upcase}/}_HPP",
			"",
			"",
			"namespace ${1}",
			"{",
			"    class ${2}",
			"    {",
			"    public:",
			"	    ${2}();${0}",
			"    };"
			"}",
			"",
			"",
			"#endif // ${1/(.*)/${1:/upcase}/}_${2/(.*)/${2:/upcase}/}_HPP",
			""
		],
		"description": "Code snippet for a cpp file"
	}
}
